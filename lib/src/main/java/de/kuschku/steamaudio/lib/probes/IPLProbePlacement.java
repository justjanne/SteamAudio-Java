package de.kuschku.steamaudio.lib.probes;

import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;

import java.util.Collections;
import java.util.Iterator;

/**
 * The algorithm to use when generating a set of probes. Probes are generated by specifying a bounding box for a
 * portion of the scene, and an algorithm for filling the volume of the box with probes. You can generate probes
 * using different algorithms in different portions of a scene. The bounding boxes used for probe generation in
 * different regions may overlap, although this is not typical.
 */
public enum IPLProbePlacement implements IntValuedEnum<IPLProbePlacement> {
    /**
     * Places a single probe in the center of the box. The radius of the probe is large enough to fill the interior of
     * the box.
     */
    IPL_PLACEMENT_CENTROID(0),

    /**
     * Generates probes throughout the volume of the box. The algorithm is adaptive, and generates more probes in
     * regions of higher geometric complexity, and fewer probes around empty space.
     */
    IPL_PLACEMENT_OCTREE(1),

    /**
     * Generates probes that are uniformly-spaced, at a fixed height above solid geometry. A probe will never be
     * generated above another probe unless there is a solid object between them. The goal is to model floors or
     * terrain, and generate probes that are a fixed height above the floor or terrain, and uniformly-spaced along the
     * horizontal plane. This algorithm is not suitable for scenarios where the listener may fly into a region with no
     * probes; if this happens, the listener will not be influenced by any of the baked data.
     */
    IPL_PLACEMENT_UNIFORMFLOOR(2);

    public final long value;

    IPLProbePlacement(long value) {
        this.value = value;
    }

    public static IntValuedEnum<IPLProbePlacement> fromValue(int value) {
        return FlagSet.fromValue(value, values());
    }

    public long value() {
        return this.value;
    }

    public Iterator<IPLProbePlacement> iterator() {
        return Collections.singleton(this).iterator();
    }
}
